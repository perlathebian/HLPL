chapter 9 // dates
#include "std_lib_facilities.h"

#include<iostream>
#include<ctime>
using namespace std;


struct Date
{
	Date(int y, int m, int d);

	int y;
	int m;
	int d;
};

Date::Date(int yy, int mm, int dd)
{
	int yearMin(1900), yearMax(3000);
	if (yy > yearMax || yy < yearMin)
		cout << "Invalid year."; 
	if (mm > 12 || mm < 1)
		cout << "Invalid month.";
	if (dd > 31 || dd < 1)
		cout << "Invalid day."; 
	else
	{
		y = yy; m = mm; d = dd;
	}
}

void add_day(Date& dd, int n)
{
	//increase dd by n days
	dd.d += n;
}

ostream& operator<<(ostream& os, const Date& d)
{
	return os << "(" << d.y << "," << d.m << "," << d.d << ")";
}

int main()
{
	Date today( 1978, 6, 25 );
	Date tomorrow( today );

	add_day(tomorrow, 1);

	cout << today << endl;
	cout << tomorrow << endl;
    cout<<endl<<endl;
	//invalid date
	Date invalidDate{ 1300, 27, -4 };

	return 0;
}
______________________________________________________________________________________________________________________________
#include "std_lib_facilities.h"

#include<iostream>
#include<ctime>
using namespace std;



struct Date
{
	Date(int y, int m, int d);

	void add_day(int n);

	int y, m, d;
};

Date::Date(int yy, int mm, int dd)
{
	int yearMin(1900), yearMax(3000);
	if (yy > yearMax || yy < yearMin)
		cout << "Invalid year.";
	if (mm > 12 || mm < 1)
		cout << "Invalid month.";
	if (dd > 31 || dd < 1)
		cout << "Invalid day." << endl;
	else
	{
		y = yy; m = mm; d = dd;
	}
}

void Date::add_day(int n)
{
	if (d += n > 31)
	{
		d = 1;
		++m;
	}
}

ostream& operator<<(ostream& os, const Date& d)
{
	return os << "(" << d.y
		<< "," << d.m
		<< "," << d.d << ")";
}

int main()
{
	Date today( 1978, 6, 31 );
	Date tomorrow( today );

	tomorrow.add_day(1);

	cout << today << endl;
	cout << tomorrow << endl;
	cout<<endl<<endl;
	//invalid date
	Date invalidDate{ 1300, 27, -4 };

	return 0;
}
______________________________________________________________________________________________________________________________________
#include "std_lib_facilities.h"

#include<iostream>
#include<ctime>
using namespace std;

class Date
{
public:
	Date(int y, int m, int d);

	void add_day(int n);

	int month() const { return m; }
	int day() const { return d; }
	int year() const { return y; }

private:
	int y, m, d;
};

Date::Date(int yy, int mm, int dd)
{
	int yearMin(1900), yearMax(3000);
	if (yy > yearMax || yy < yearMin)
		cout << "Invalid year.";
	if (mm > 12 || mm < 1)
		cout << "Invalid month.";
	if (dd > 31 || dd < 1)
		cout << "Invalid day." << endl;
	else
	{
		y = yy; m = mm; d = dd;
	}
}

void Date::add_day(int n)
{
	if (d += n > 31)
	{
		d = 1;
		++m;
	}
}

ostream& operator<<(ostream& os, const Date& d)
{
	return os << "(" << d.year()
		<< "," << d.month()
		<< "," << d.day() << ")";
}

int main()
{
	Date today( 1978, 6, 31 );
	Date tomorrow( today );

	tomorrow.add_day(1);

	cout << today << endl;
	cout << tomorrow << endl;
	cout<<endl<<endl;
	//invalid date
	Date invalidDate{ 1300, 27, -4 };

	return 0;
}_________________________________________________________________________________________________________
#include "std_lib_facilities.h"

enum class Month
{
	jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec
};

class Date
{
public:
	Date(int y, Month m, int d);

	void add_day(int n);

	Month month() const { return m; }
	int day() const { return d; }
	int year() const { return y; }

private:
	int y, d;
	Month m;
};

Date::Date(int yy, Month mm, int dd)
{
	int yearMin(1900), yearMax(3000);
	if (yy > yearMax || yy < yearMin)
		cout << "Invalid year.";
	if (int(mm) > 12 || int(mm) < 1) // you get a c cast
		cout << "Invalid month.";
	if (dd > 31 || dd < 1)
		cout << "Invalid day." << endl;
	else
	{
		y = yy; m = mm; d = dd;
	}
}

void Date::add_day(int n)
{
	//if d += n is more than 31, make it 1, else return d
	if (d += n > 31)
	{
		d = 1;
		int nextM = int(m) + 1;		
		if (nextM > 12)
		{
			m = Month::jan;
			if (++y > 3000)
				cout << "It is not the year 3000; busted" << endl;
		}
		else
			m = Month(nextM);			
	}
}

ostream& operator<<(ostream& os, const Date& d)
{
	return os << "(" << d.year() << "," << int(d.month()) << "," << d.day() << ")";
}

int main()
{
	
	Date today( 1978, Month::dec, 31 );
	Date tomorrow( today );

	tomorrow.add_day(1);

	cout << today << endl;
	cout << tomorrow << endl;
	cout<<endl<<endl;
	//invalid date
	Date invalidDate{ 1300, Month::dec, -4 };

	return 0;
}
_____________________________________________________________________________________________________________________
#include "std_lib_facilities.h"

enum class Month
{
	jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec
};

class Date
{
public:
	Date(int y, Month m, int d);

	void add_day(int n);
	void add_month(int n);
	void add_year(int n);

	Month month() const { return m; }
	int day() const { return d; }
	int year() const { return y; }

private:
	int y, d;
	Month m;
};


Date::Date(int yy, Month mm, int dd)
{
	int yearMin(1900), yearMax(3000);
	if (yy > yearMax || yy < yearMin)
		cout << "Invalid year.";
	if (int(mm) > 12 || int(mm) < 1)
		cout << "Invalid month.";
	if (dd > 31 || dd < 1)
		cout << "Invalid day." << endl;
	else
	{
		y = yy; m = mm; d = dd;
	}
}

void Date::add_day(int n)
{

	if ((d += n) > 31)
	{
		d = 1;
		int nextM = int(m) + 1;
		if (nextM > 12)
		{
			add_month(1);
		}
		else
			m = Month(nextM);
	}
}



void Date::add_month(int n)
{
	int nextM = 0;
	if ((nextM = int(m) + n) > 12)
	{
		m = Month::jan;
		add_year(1);
	}
	else
		m = Month(nextM);
}

void Date::add_year(int n)
{
	y += n;
	if (y > 3000)
	{
		cout << "It is not the year 3000" << endl;
		y -= n;
	}
}

ostream& operator<<(ostream& os, const Date& d)
{
	return os << "(" << d.year() << "," << int(d.month()) << "," << d.day() << ")";
}

int main()
{
	Date today(1978, Month::jan, 30);
	Date tomorrow(today);

	tomorrow.add_day(1);
	cout << tomorrow << endl;
	tomorrow.add_month(1);
	cout << tomorrow << endl;
	tomorrow.add_year(5);
	cout << tomorrow << endl;


	cout << "\n" << today << endl;
	cout << tomorrow << endl;

	//invalid date
	Date invalidDate{ 1300, Month::dec, -4 };

	return 0;
}
